.MODEL SMALL
.STACK 100
.DATA
    ;Menu and submenu for customer
	SHOPNAME			DB	"   _______________________________________________ ", 0AH, 0DH  ;00H
						DB	"  |                                               |", 0AH, 0DH  ;01H	
						DB  "  |  ==============One Bite Bakery==============  |", 0AH, 0DH  ;02H
						DB  "  |            ---     -----    -----             |", 0AH, 0DH  ;03H
						DB  "  |          /     \   |  _  \  |  _  \           |", 0AH, 0DH  ;04H
						DB  "  |         |  / \  |  |     /  |     /           |", 0AH, 0DH  ;05H
						DB  "  |         |  \ /  |  |  _  \  |  _  \           |", 0AH, 0DH  ;06H
						DB  "  |          \     /   |     /  |     /           |", 0AH, 0DH  ;07H
						DB  "  |            ---     -----    -----             |", 0AH, 0DH  ;08H
						DB	"  |                                               |", 0AH, 0DH	 ;09H
						DB	"  |   1. View Menu                                |", 0AH, 0DH  ;0AH
						DB	"  |   2. Staff Login                              |", 0AH, 0DH	 ;0BH	
						DB	"  |   3. Exit                                     |", 0AH, 0DH	 ;0CH
						DB	"  |                                               |", 0AH, 0DH	 ;0DH	
						DB	"  |   Enter your selection:                       |", 0AH, 0DH	 ;0EH	
						DB	"  |                                               |", 0AH, 0DH	 ;0FH	
						DB	"  |                                               |", 0AH, 0DH	 ;10H	
						DB	"  |                                               |", 0AH, 0DH	 ;11H	
						DB	"  |                                               |", 0AH, 0DH	 ;12H
						DB	"  |                                               |", 0AH, 0DH	 ;13H
						DB	"  |                                               |", 0AH, 0DH	 ;14H
						DB	"  |                                               |", 0AH, 0DH	 ;15H
						DB	"  |                                               |", 0AH, 0DH	 ;16H
						DB	"  |                                               |", 0AH, 0DH	 ;17H
						DB	"  |_______________________________________________|", 0AH, 0DH,"$";18H
								; all underscore symbol (keyboard)
								
	SHOPNAME_INVALID	DB	"  |    INVALID SELECTION!!! PLEASE RE-ENTER...    |", 0AH, 0DH	 ;10H	
						DB	"  |             PRESS <ENTER> TO RETRY            |", 0AH, 0DH	 ;11H	
						DB	"  |                                               |", 0AH, 0DH,"$"	 ;12H

	MENU_SELECTION  	DB ?
	MENU_THANKS			DB	"  |        Thankyou for using our system!         |", 0AH, 0DH	 ;0AH
						DB	"  |               Have a nice day!                |", 0AH, 0DH	 ;0BH
						DB	"  |                                               |", 0AH, 0DH	 ;0CH
						DB	"  |_______________________________________________|", 0AH, 0DH	 ;0DH	
						DB	"                                                   ", 0AH, 0DH	 ;0EH	
						DB	"                                                   ", 0AH, 0DH	 ;0FH	
						DB	"                                                   ", 0AH, 0DH	 ;10H	
						DB	"                                                   ", 0AH, 0DH	 ;11H	
						DB	"                                                   ", 0AH, 0DH	 ;12H
						DB	"                                                   ", 0AH, 0DH	 ;13H
						DB	"                                                   ", 0AH, 0DH	 ;14H
						DB	"                                                   ", 0AH, 0DH	 ;15H
						DB	"                                                   ", 0AH, 0DH	 ;16H
						DB	"                                                   ", 0AH, 0DH	 ;17H
						DB	"                                                   ", 0AH, 0DH,"$";18H
	
	;Admin Login and logout module

	INVALID				DB	"  |        INVALID username or password !!!       |", 0AH, 0DH	 ;11H	
						DB	"  |                                               |", 0AH, 0DH	 ;12H
	NL 				DB  0AH,0DH,"$"

	
	RETURN_BACK_MAIN DB	"RETURN >> {R}$"
	
	STRFONT 			DB	"   _______________________________________________ ", 0AH, 0DH  ;00H
						DB	"  |                                               |", 0AH, 0DH  ;01H	
						DB  "  |   <<<<<{*** Welcome To Login Page ***}>>>>>   |", 0AH, 0DH  ;02H
						DB  "  |                                               |", 0AH, 0DH  ;03H
						DB  "  |                WELCOME   STAFF                |", 0AH, 0DH  ;04H
						DB  "  |    PLEASE  LOGIN  TO  ACCESS  YOUR  ACCOUNT   |", 0AH, 0DH  ;05H
						DB  "  |                                               |", 0AH, 0DH  ;06H
						DB  "  |                                               |", 0AH, 0DH  ;07H
						DB  "  |         _____________________________         |", 0AH, 0DH  ;08H
						DB	"  |        |                             |        |", 0AH, 0DH	 ;09H
						DB	"  |        |                             |        |", 0AH, 0DH  ;0AH
						DB	"  |        |                             |        |", 0AH, 0DH	 ;0BH	
						DB	"  |        |                             |        |", 0AH, 0DH	 ;0CH
						DB	"  |        |                             |        |", 0AH, 0DH	 ;0DH	
						DB	"  |        |_____________________________|        |", 0AH, 0DH	 ;0EH	
						DB	"  |                                               |", 0AH, 0DH	 ;0FH	
						DB	"  |                                               |", 0AH, 0DH	 ;10H	
						DB	"  |                                               |", 0AH, 0DH	 ;11H	
						DB	"  |                                               |", 0AH, 0DH	 ;12H
						DB	"  |                                               |", 0AH, 0DH	 ;13H
						DB	"  |                                               |", 0AH, 0DH	 ;14H
						DB	"  |                               RETURN  {R}     |", 0AH, 0DH	 ;15H
						DB	"  |                                               |", 0AH, 0DH	 ;16H
						DB	"  |                                               |", 0AH, 0DH	 ;17H
						DB	"  |_______________________________________________|", 0AH, 0DH,"$";18H
						
	STRFONT_LOGIN_R		DB	"  |                               RETURN  {R}     |", 0AH, 0DH,"$"	 ;15H					
						
	USERNAME       		DB  "  |            Username :                         |", 0AH, 0DH ;0AH
						DB	"  |            Password :                         |", 0AH, 0DH,"$"	 ;0BH
	
	PASSWORD			DB	"  |            Password :                         |", 0AH, 0DH	 ;0BH
						DB	"  |                                               |", 0AH, 0DH	 ;0CH
						DB	"  |               <ENTER>  TO LOG IN              |", 0AH, 0DH,"$" ;0DH					
	
	;<ENTER> DB 0DH
	
	;Admin Login: 
	TARUMT   	DB "tarumt$"; USERNAME
	VERIFY  	DB "mrloh$" ; PSW(2)
	
	;Admin input username and password: 
	USER     	DB 12 DUP("$")
	PSW      	DB 12 DUP("$")  
	
	;Secure Logout:
	
	;Admin Menuï¼šSales Report
	SYSTEM      DB "===WELCOME TO ADMIN SYSTEM===$"
	CHECKING    DB "    SALES REPORT CHECKING   [1] >$"
	XCHECKING   DB "    EXIT  |  LOG-OUT        [2] >$"
	ENSURE      DB "    ARE YOU SURE TO CONTINUE LOG-OUT (EXIT)? [Y/N]$"
	SELECTION   DB ?
	INVALIDSEC  DB "INVALID SELECTION!!! PLEASE RE-ENTER...$"
	LEAVING     DB "    PRESS <ENTER> TO EXIT"
	
	REMOVEINV   DB "	   PRESS <ENTER> TO RETURN$"
	
	HERE DB "HERE IS REPORT$"
	;Check Order Status
	
	;Place Order
	;FONTPAGE			      ;05H					    			;48D = 30H       [DH]
    WELC_MENU		DB	"   _______________________________________________ ", 0AH, 0DH	 ;00H
					DB	"  |                                               |", 0AH, 0DH	 ;01H
					DB  "  |   {[> == == == WELCOME TO MENU == == == <]}   |", 0AH, 0DH	 ;02H
					DB	"  |   _________________________________________   |", 0AH, 0DH	 ;03H
					DB	"  |   *****************************************   |", 0AH, 0DH	 ;04H
					DB	"  |                                               |", 0AH, 0DH	 ;05H
					DB	"  |    CATEGORY OF PRODUCTS :                     |", 0AH, 0DH	 ;06H
					DB	"  |    _______________________________________    |", 0AH, 0DH	 ;07H
					DB	"  |   | ************************************* |   |", 0AH, 0DH	 ;08H
					DB	"  |   |   {1}    BUN                          |   |", 0AH, 0DH	 ;09H
					DB	"  |   |   {2}    CAKE                         |   |", 0AH, 0DH	 ;0AH
					DB	"  |   |_______________________________________|   |", 0AH, 0DH	 ;0BH
					DB	"  |                                               |", 0AH, 0DH  ;0CH
					DB	"  |    SELECTION :         ||    RETURN >> {R}    |", 0AH, 0DH	 ;0DH
					DB	"  |                                               |", 0AH, 0DH	 ;0EH
					DB	"  |                                               |", 0AH, 0DH	 ;0FH
					DB	"  |                                               |", 0AH, 0DH	 ;10H
					DB	"  |                                               |", 0AH, 0DH	 ;11H
					DB	"  |                                               |", 0AH, 0DH	 ;12H
					DB	"  |                                               |", 0AH, 0DH	 ;13H
					DB	"  |                                               |", 0AH, 0DH	 ;14H
					DB	"  |                                               |", 0AH, 0DH	 ;15H
					DB	"  |                                               |", 0AH, 0DH	 ;16H
					DB	"  |_______________________________________________|", 0AH, 0DH,"$";17H
																						 ;18H
																					 
	LIST_SUBOPT1	DB	"  |    CATEGORY OF PRODUCTS :  BUN                |", 0AH, 0DH	 ;06H
					DB	"  |    _______________________________________    |", 0AH, 0DH	 ;07H
					DB	"  |   | ************************************* |   |", 0AH, 0DH	 ;08H
					DB	"  |   |   {A}    CHEESE BUN   >>>   RM 2.00   |   |", 0AH, 0DH	 ;09H
					DB	"  |   |   {B}    POTATO BUN   >>>   RM 3.00   |   |", 0AH, 0DH	 ;0AH
					DB	"  |   |_______________________________________|   |", 0AH, 0DH	 ;0BH
					DB	"  |                                               |", 0AH, 0DH  ;0CH
					DB	"  |    CONTINUE <ENTER>    ||    RETURN >> {R}    |", 0AH, 0DH,"$";0DH
					
	LIST_SUBOPT2	DB	"  |    CATEGORY OF PRODUCTS :  CAKE               |", 0AH, 0DH	 ;06H
					DB	"  |    _______________________________________    |", 0AH, 0DH	 ;07H
					DB	"  |   | ************************************* |   |", 0AH, 0DH	 ;08H
					DB	"  |   |   {A}    CHOCOLATE CAKE  >> RM 4.00   |   |", 0AH, 0DH	 ;09H
					DB	"  |   |   {B}    BANANA CAKE     >> RM 5.00   |   |", 0AH, 0DH	 ;0AH
					DB	"  |   |_______________________________________|   |", 0AH, 0DH	 ;0BH
					DB	"  |                                               |", 0AH, 0DH  ;0CH
					DB	"  |    CONTINUE <ENTER>    ||    RETURN >> {R}    |", 0AH, 0DH,"$";0DH
	
	;ACTION
	CUST_SELECTION	DB	?				  ;|18D ==> 12H	
	QUANTITY_PROD	DB	?                     ;21D ==> 15H
	SELECT_PROD		DB	"  |    SELECTION :                                |", 0AH, 0DH,"$";0DH	
	QTY_PROD		DB	"  |    QUANTITY  >>>                              |", 0AH, 0DH,"$";0EH
	LIST_SELECT_INV	DB	"  |    INVALID CODE!!!...PLEASE RE-ENTER          |", 0AH, 0DH,"$" ;11H
	
	TOTAL_COST		DB	"  |    _______________________________________    |", 0AH, 0DH	 ;11H
					DB	"  |                                               |", 0AH, 0DH	 ;12H
					DB	"  |    TOTAL COST :                 RM            |", 0AH, 0DH,"$";13H
						                                       ;41D==>29H
	;PRICE
	NUM1	DB	2
	NUM2	DB	3
	NUM3	DB	4
	NUM4	DB	5
	TEN		DB	10
	
	
.CODE
LCUST_SELECT PROC
		;background (SELECTION)
		MOV AH,06H
		MOV AX,0600H
		MOV BH,3EH
		MOV CX,0D12H
		MOV DX,0D14H
		INT 10H
		;fontground
		MOV AH,02H
		MOV BH,00H
		MOV DH,0DH
		MOV DL,13H
		INT 10H

		MOV AH,01H
		INT 21H
		MOV CUST_SELECTION,AL
	
		CMP AL,'r'
		JE LCUST_SELECT_RETURN
		CMP AL,'R'
		JE LCUST_SELECT_RETURN
		
		SUB AL,30H
		CMP AL,1
		JMP LCUST_OPT_1
		
		CMP AL,2
		JMP LCUST_OPT_2

		JMP LCUST_OPT_INVALID
		
	LCUST_SELECT_RETURN:
		CALL MAIN
		JMP MENU_ENDL

	LCUST_OPT_1:
		CALL LCUST_SELECT_1				;	CALL PROCEDURE
		JMP MENU_ENDL
	
	LCUST_OPT_2:
		CALL LCUST_SELECT_2			;	CALL PROCEDURE
		JMP MENU_ENDL
	
	LCUST_OPT_INVALID:
		CALL LCUST_SELECT_INVALID
		MOV AH,01H
		INT 21H
		CMP AL,0DH					; <ENTER> TO CONTINUE
		JE BACK_MENU
	
	BACK_MENU:
		JMP LWELC_MENU
	
	RET     ;RETURN TO PROCEDURE
	
LCUST_SELECT ENDP


;=========================================================================================================
;+++++++++++++++++++++++++++++++++++( FOR OPT 1 A & B )+++++++++++++++++++++++++++++++++++++++++++++++++++
LCUST_SELECT_1 PROC
    PUSH DX	; store main procedure cursor 
    
	LCUST_SELECT_1_DISPLAY:
		;background (MENU FONT)
		MOV AH,06H
		MOV AL,00H
		MOV BH,6EH
		MOV CX,0600H
		MOV DX,0D38H
		INT 10H
		
		;background (RETURN {R})
		MOV AH,06H
		MOV AL,00H
		MOV BH,6CH
		MOV CX,0D21H
		MOV DX,0D2DH
		INT 10H
		
		;fontground (LIST_SUBOPT1 PART)
		MOV AH,02H
		MOV BH,00H
		MOV DH,06H 
		MOV DL,00H       
		INT 10H
		
		; show LIST_SUBOPT1
		MOV AH,09H
		LEA DX,LIST_SUBOPT1
		INT 21H
		
		;background to hide input
		MOV AH,06H
		MOV AL,00H
		MOV BH,66H
		MOV CX,0E00H
		MOV DX,0E01H
		INT 10H
		;fontground for hide input
		MOV AH,02H
		MOV BH,00H
		MOV DH,0EH
		MOV DL,00H
		INT 10H
		
		MOV AH,01H
		INT 21H
		MOV CUST_SELECTION,AL
		CMP AL,0DH
		JE LCUST_SELECT_1_CONTINUE
		CMP AL,'r'
		JE LCUST_SELECT_1_RETURN
		CMP AL,'R'
		JE LCUST_SELECT_1_RETURN
		JMP LCUST_SELECT_1_DISPLAY		; jmp back LCUST_SELECT_1_DISPLAY
	
	LCUST_SELECT_1_RETURN:
		POP DX 		;to recover LWELC_MENU:           
		JMP LWELC_MENU          


	LCUST_SELECT_1_CONTINUE:
		;fontground (SELECTION A OR B)
		MOV AH,02H
		MOV BH,00H
		MOV DH,0DH
		MOV DL,00H
		INT 10H
		
		MOV AH,09H
		LEA DX,SELECT_PROD
		INT 21H

		;fontground (SELECTION A OR B)
		MOV AH,02H
		MOV BH,00H
		MOV DH,0DH
		MOV DL,13H
		INT 10H
		
		; SELECTION A OR B
		MOV AH,01H
		INT 21H
		MOV CUST_SELECTION,AL
		CMP AL,'A'
		JE LCUST_SELECT_1_A
		CMP AL,'a'
		JE LCUST_SELECT_1_A
		CMP AL,'B'
		JE LCUST_SELECT_1_B
		CMP AL,'b'
		JE LCUST_SELECT_1_B
		JMP LCUST_SELECT_1_CONTINUE		; jmp back LCUST_SELECT_1_CONTINUE
	
	LCUST_SELECT_1_A:
		CALL LCUST_SELECT_1_A_BUY
		JMP LCUST_SELECT_1_COST
	
	LCUST_SELECT_1_B:
		CALL LCUST_SELECT_1_B_BUY
		JMP LCUST_SELECT_1_COST


	LCUST_SELECT_1_COST:
		POP DX		;to recover LWELC_MENU:
		MOV AH, 02H
		MOV BH, 00H
		MOV DH, 0DH
		MOV DL, 13H
		INT 10H
		RET            ;RETURN TO PROCEDURE        
LCUST_SELECT_1 ENDP


LCUST_SELECT_1_A_BUY PROC
    PUSH DX	
    PUSH BX
    PUSH CX
    PUSH SI    ; SI REGISTER ACT AS A TEMPORALY STORAGE
    
    ;background (QTY)
    MOV AH,06H
    MOV AX,0600H
    MOV BH,6EH
    MOV CX,0E00H
    MOV DX,0E2FH
    INT 10H
    
    ;fontground (QTY)
    MOV AH,02H
    MOV BH,00H
    MOV DH,0EH
    MOV DL,00H
    INT 10H
    
    MOV AH,09H
    LEA DX,QTY_PROD
    INT 21H
    
    ;cin >> quantity 
    MOV AH,02H
    MOV BH,00H
    MOV DH,0EH     
    MOV DL,17H
    INT 10H
    
    ;QTY TENS DIGIT IF QTY >= 10
    MOV AH,01H
    INT 21H
    SUB AL,30H
    MOV BL,AL      
    
    ;QTY ONES DIGIT ONLY
    MOV AH,01H
    INT 21H
    SUB AL,30H
    MOV BH,AL 
    
    ;REAL QTY = 10(BL)+BH
	MOV AL,BL
	MOV CL,10
    MUL CL		;AL = BL * 10   
    ADD AL,BH   ;10(BL)+BH
    MOV QUANTITY_PROD,AL  ;NOW STORE REAL QTY TO CALC
    
    ;cout << total_cost
    MOV AH,02H
    MOV BH,00H
    MOV DH,11H     
    MOV DL,00H
    INT 10H    
    
    MOV AH,09H
    LEA DX,TOTAL_COST
    INT 21H
    
    ;=====CALCULATION OF COST=========
	MOV AH,0 		;INITIALIZIE AH  --> SO AX=AL
    MOV AL,QUANTITY_PROD 
	MOV BL,NUM1		; STORE NUM1(2) --> [BL]
    MUL BL              
	
	;STORE REAL QUANTITY_PROD -> [SI]
	MOV SI,AX
    
    ;DEVIDE TENS & ONES TO AVOID COMBINE
    MOV BL,10
    DIV BL      ; AL -> TENS | AH -> ONES

    MOV CL,AL   ;USE CX AFTER PUSH IT IN STACK          
    MOV CH,AH             
    
    ;fontground (cost)
    MOV AH,02H
    MOV BH,00H
    MOV DH,13H
    MOV DL,29H
    INT 10H    
    
    ;DISPLAY TEN'S DIGIT (4 STATEMEMT)
    CMP CL,0         
    JE DISPLAY_ONES_DIGIT_1_A_BUY
    
    ;IF NOT (INVALID)
    MOV AH,02H 
    MOV DL,CL
    ADD DL,30H
    INT 21H

	DISPLAY_ONES_DIGIT_1_A_BUY:
		MOV AH,02H       
		MOV DL,CH
		ADD DL,30H
		INT 21H
		
		;DECIMAL POINT
		MOV DL,'.'
		INT 21H
		MOV DL,'0'
		INT 21H
		MOV DL,'0'
		INT 21H

		POP SI		
		POP CX
		POP BX
		POP DX		;to recover LWELC_MENU:
		MOV AH, 02H
		MOV BH, 00H
		MOV DH, 0DH
		MOV DL, 13H
		INT 10H
		RET            ;RETURN TO PROCEDURE 
LCUST_SELECT_1_A_BUY ENDP


LCUST_SELECT_1_B_BUY PROC
    PUSH DX	; store main procedure cursor 
	PUSH BX
    PUSH CX
    PUSH SI    ; SI REGISTER ACT AS A TEMPORALY STORAGE	
    
    ;background (QTY)
    MOV AH,06H
    MOV AX,0600H
    MOV BH,6EH
    MOV CX,0E00H
    MOV DX,0E2FH
    INT 10H
    
    ;fontground (QTY)
    MOV AH,02H
    MOV BH,00H
    MOV DH,0EH
    MOV DL,00H
    INT 10H
    
    MOV AH,09H
    LEA DX,QTY_PROD
    INT 21H
    
    ;cin >> quantity 
    MOV AH,02H
    MOV BH,00H
    MOV DH,0EH     
    MOV DL,17H
    INT 10H
    
    ;QTY TENS DIGIT IF QTY >= 10
    MOV AH,01H
    INT 21H
    SUB AL,30H
    MOV BL,AL      
    
    ;QTY ONES DIGIT ONLY
    MOV AH,01H
    INT 21H
    SUB AL,30H
    MOV BH,AL 
    
    ;REAL QTY = 10(BL)+BH
	MOV AL,BL
	MOV CL,10
    MUL CL		;AL = BL * 10   
    ADD AL,BH   ;10(BL)+BH
    MOV QUANTITY_PROD,AL  ;NOW STORE REAL QTY TO CALC
    
    ;cout << total_cost
    MOV AH,02H
    MOV BH,00H
    MOV DH,11H     
    MOV DL,00H
    INT 10H    
    
    MOV AH,09H
    LEA DX,TOTAL_COST
    INT 21H
    
    ;=====CALCULATION OF COST=========
	MOV AH,0 		;INITIALIZIE AH  --> SO AX=AL
    MOV AL,QUANTITY_PROD 
	MOV BL,NUM2		; STORE NUM1(2) --> [BL]
    MUL BL              
	
	;STORE REAL QUANTITY_PROD -> [SI]
	MOV SI,AX
    
    ;DEVIDE TENS & ONES TO AVOID COMBINE
    MOV BL,10
    DIV BL      ; AL -> TENS | AH -> ONES

    MOV CL,AL   ;USE CX AFTER PUSH IT IN STACK          
    MOV CH,AH             
    
    ;fontground (cost)
    MOV AH,02H
    MOV BH,00H
    MOV DH,13H
    MOV DL,29H
    INT 10H    
    
    ;DISPLAY TEN'S DIGIT (4 STATEMEMT)
    CMP CL,0         
    JE DISPLAY_ONES_DIGIT_1_B_BUY
    
    ;IF NOT (INVALID)
    MOV AH,02H 
    MOV DL,CL
    ADD DL,30H
    INT 21H

	DISPLAY_ONES_DIGIT_1_B_BUY:
		MOV AH,02H       
		MOV DL,CH
		ADD DL,30H
		INT 21H
		
		;DECIMAL POINT
		MOV DL,'.'
		INT 21H
		MOV DL,'0'
		INT 21H
		MOV DL,'0'
		INT 21H

		POP SI		
		POP CX
		POP BX
		POP DX		;to recover LWELC_MENU:
		MOV AH, 02H
		MOV BH, 00H
		MOV DH, 0DH
		MOV DL, 13H
		INT 10H
		RET            ;RETURN TO PROCEDURE 
LCUST_SELECT_1_B_BUY ENDP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;=========================================================================================================


;=========================================================================================================
;+++++++++++++++++++++++++++++++++++( FOR OPT 2 A & B )+++++++++++++++++++++++++++++++++++++++++++++++++++
LCUST_SELECT_2 PROC
    PUSH DX	; store main procedure cursor 
    
	LCUST_SELECT_2_DISPLAY:
		;background (MENU FONT)
		MOV AH,06H
		MOV AL,00H
		MOV BH,6EH
		MOV CX,0600H
		MOV DX,0D38H
		INT 10H
		
		;background (RETURN {R})
		MOV AH,06H
		MOV AL,00H
		MOV BH,6CH
		MOV CX,0D21H
		MOV DX,0D2DH
		INT 10H
		
		;fontground (LIST_SUBOPT2 PART)
		MOV AH,02H
		MOV BH,00H
		MOV DH,06H 
		MOV DL,00H       
		INT 10H
		
		; show LIST_SUBOPT1
		MOV AH,09H
		LEA DX,LIST_SUBOPT2
		INT 21H
		
		;background to hide input
		MOV AH,06H
		MOV AL,00H
		MOV BH,66H
		MOV CX,0E00H
		MOV DX,0E01H
		INT 10H
		;fontground for hide input
		MOV AH,02H
		MOV BH,00H
		MOV DH,0EH
		MOV DL,00H
		INT 10H
		
		MOV AH,01H
		INT 21H
		MOV CUST_SELECTION,AL
		CMP AL,0DH
		JE LCUST_SELECT_2_CONTINUE
		CMP AL,'r'
		JE LCUST_SELECT_2_RETURN
		CMP AL,'R'
		JE LCUST_SELECT_2_RETURN
		JMP LCUST_SELECT_2_DISPLAY		; jmp back LCUST_SELECT_2_DISPLAY
	
	LCUST_SELECT_2_RETURN:
		POP DX 		;to recover LWELC_MENU:           
		JMP LWELC_MENU          


	LCUST_SELECT_2_CONTINUE:
		;fontground (SELECTION A OR B)
		MOV AH,02H
		MOV BH,00H
		MOV DH,0DH
		MOV DL,00H
		INT 10H
		
		MOV AH,09H
		LEA DX,SELECT_PROD
		INT 21H

		;fontground (SELECTION A OR B)
		MOV AH,02H
		MOV BH,00H
		MOV DH,0DH
		MOV DL,13H
		INT 10H
		
		; SELECTION A OR B
		MOV AH,01H
		INT 21H
		MOV CUST_SELECTION,AL
		CMP AL,'A'
		JE LCUST_SELECT_2_A
		CMP AL,'a'
		JE LCUST_SELECT_2_A
		CMP AL,'B'
		JE LCUST_SELECT_2_B
		CMP AL,'b'
		JE LCUST_SELECT_2_B
		JMP LCUST_SELECT_2_CONTINUE		; jmp back LCUST_SELECT_2_CONTINUE
	
	LCUST_SELECT_2_A:
		CALL LCUST_SELECT_2_A_BUY
		JMP LCUST_SELECT_2_COST
	
	LCUST_SELECT_2_B:
		CALL LCUST_SELECT_2_B_BUY
		JMP LCUST_SELECT_2_COST


	LCUST_SELECT_2_COST:
		POP DX		;to recover LWELC_MENU:
		MOV AH, 02H
		MOV BH, 00H
		MOV DH, 0DH
		MOV DL, 13H
		INT 10H
		RET            ;RETURN TO PROCEDURE        
LCUST_SELECT_2 ENDP


LCUST_SELECT_2_A_BUY PROC
    PUSH DX	; store main procedure cursor 
	PUSH BX
    PUSH CX
    PUSH SI    ; SI REGISTER ACT AS A TEMPORALY STORAGE
    
    ;background (QTY)
    MOV AH,06H
    MOV AX,0600H
    MOV BH,6EH
    MOV CX,0E00H
    MOV DX,0E2FH
    INT 10H
    
    ;fontground (QTY)
    MOV AH,02H
    MOV BH,00H
    MOV DH,0EH
    MOV DL,00H
    INT 10H
    
    MOV AH,09H
    LEA DX,QTY_PROD
    INT 21H
    
    ;cin >> quantity 
    MOV AH,02H
    MOV BH,00H
    MOV DH,0EH     
    MOV DL,17H
    INT 10H
    
    ;QTY TENS DIGIT IF QTY >= 10
    MOV AH,01H
    INT 21H
    SUB AL,30H
    MOV BL,AL      
    
    ;QTY ONES DIGIT ONLY
    MOV AH,01H
    INT 21H
    SUB AL,30H
    MOV BH,AL 
    
    ;REAL QTY = 10(BL)+BH
	MOV AL,BL
	MOV CL,10
    MUL CL		;AL = BL * 10   
    ADD AL,BH   ;10(BL)+BH
    MOV QUANTITY_PROD,AL  ;NOW STORE REAL QTY TO CALC
    
    ;cout << total_cost
    MOV AH,02H
    MOV BH,00H
    MOV DH,11H     
    MOV DL,00H
    INT 10H    
    
    MOV AH,09H
    LEA DX,TOTAL_COST
    INT 21H
    
    ;=====CALCULATION OF COST=========
	MOV AH,0 		;INITIALIZIE AH  --> SO AX=AL
    MOV AL,QUANTITY_PROD 
	MOV BL,NUM3		; STORE NUM3(4) --> [BL]
    MUL BL

	;STORE REAL QUANTITY_PROD -> [SI]
	MOV SI,AX	
    
    ;DEVIDE TENS & ONES TO AVOID COMBINE
    MOV BL,10
    DIV BL      ; AL -> TENS | AH -> ONES

    MOV CL,AL   ;USE CX AFTER PUSH IT IN STACK          
    MOV CH,AH             
    
    ;fontground (cost)
    MOV AH,02H
    MOV BH,00H
    MOV DH,13H
    MOV DL,29H
    INT 10H    
    
    ;DISPLAY TEN'S DIGIT (4 STATEMEMT)
    CMP CL,0         
    JE DISPLAY_ONES_DIGIT_2_A_BUY
    
    ;IF NOT (INVALID)
    MOV AH,02H 
    MOV DL,CL
    ADD DL,30H
    INT 21H

	DISPLAY_ONES_DIGIT_2_A_BUY:
		MOV AH,02H       
		MOV DL,CH
		ADD DL,30H
		INT 21H
		
		;DECIMAL POINT
		MOV DL,'.'
		INT 21H
		MOV DL,'0'
		INT 21H
		MOV DL,'0'
		INT 21H
		
		POP SI
		POP CX
		POP BX
		POP DX		;to recover LWELC_MENU:
		MOV AH, 02H
		MOV BH, 00H
		MOV DH, 0DH
		MOV DL, 13H
		INT 10H
		RET            ;RETURN TO PROCEDURE 
LCUST_SELECT_2_A_BUY ENDP


LCUST_SELECT_2_B_BUY PROC
    PUSH DX	; store main procedure cursor 
	PUSH BX
    PUSH CX
    PUSH SI    ; SI REGISTER ACT AS A TEMPORALY STORAGE
    
    ;background (QTY)
    MOV AH,06H
    MOV AX,0600H
    MOV BH,6EH
    MOV CX,0E00H
    MOV DX,0E2FH
    INT 10H
    
    ;fontground (QTY)
    MOV AH,02H
    MOV BH,00H
    MOV DH,0EH
    MOV DL,00H
    INT 10H
    
    MOV AH,09H
    LEA DX,QTY_PROD
    INT 21H
    
    ;cin >> quantity 
    MOV AH,02H
    MOV BH,00H
    MOV DH,0EH     
    MOV DL,17H
    INT 10H
    
    ;QTY TENS DIGIT IF QTY >= 10
    MOV AH,01H
    INT 21H
    SUB AL,30H
    MOV BL,AL      
    
    ;QTY ONES DIGIT ONLY
    MOV AH,01H
    INT 21H
    SUB AL,30H
    MOV BH,AL 
    
    ;REAL QTY = 10(BL)+BH
	MOV AL,BL
	MOV CL,10
    MUL CL		;AL = BL * 10   
    ADD AL,BH   ;10(BL)+BH
    MOV QUANTITY_PROD,AL  ;NOW STORE REAL QTY TO CALC
    
    ;cout << total_cost
    MOV AH,02H
    MOV BH,00H
    MOV DH,11H     
    MOV DL,00H
    INT 10H    
    
    MOV AH,09H
    LEA DX,TOTAL_COST
    INT 21H
    
    ;=====CALCULATION OF COST=========
	MOV AH,0 		;INITIALIZIE AH  --> SO AX=AL
    MOV AL,QUANTITY_PROD 
	MOV BL,NUM4		; STORE NUM1(2) --> [BL]
    MUL BL              
		
	;STORE REAL QUANTITY_PROD -> [SI]
	MOV SI,AX
    
    ;DEVIDE TENS & ONES TO AVOID COMBINE
    MOV BL,10
    DIV BL      ; AL -> TENS | AH -> ONES

    MOV CL,AL   ;USE CX AFTER PUSH IT IN STACK          
    MOV CH,AH             
    
    ;fontground (cost)
    MOV AH,02H
    MOV BH,00H
    MOV DH,13H
    MOV DL,29H
    INT 10H    
    
    ;DISPLAY TEN'S DIGIT (4 STATEMEMT)
    CMP CL,0         
    JE DISPLAY_ONES_DIGIT_2_B_BUY
    
    ;IF NOT (INVALID)
    MOV AH,02H 
    MOV DL,CL
    ADD DL,30H
    INT 21H

	DISPLAY_ONES_DIGIT_2_B_BUY:
		MOV AH,02H       
		MOV DL,CH
		ADD DL,30H
		INT 21H
		
		;DECIMAL POINT
		MOV DL,'.'
		INT 21H
		MOV DL,'0'
		INT 21H
		MOV DL,'0'
		INT 21H
		
		POP SI		
		POP CX
		POP BX
		POP DX		;to recover LWELC_MENU:
		MOV AH, 02H
		MOV BH, 00H
		MOV DH, 0DH
		MOV DL, 13H
		INT 10H
		RET            ;RETURN TO PROCEDURE 
LCUST_SELECT_2_B_BUY ENDP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;=========================================================================================================


LCUST_SELECT_INVALID PROC
    
	PUSH DX  ; store main procedure cursor 
    
    MOV AH,02H
    MOV BH,00H
    MOV DH,11H       
    MOV DL,00H       
    INT 10H
    
    MOV AH,09H
    LEA DX,LIST_SELECT_INV
    INT 21H
    
    POP DX	; take out the main procedure cursor
	
	; to recover the LCUST_SELECT PROC
    MOV AH,06H
    MOV AL,00H  
    MOV BH,3EH       
    MOV CX,0D12H     
    MOV DX,0D14H     
    INT 10H

    MOV AH,02H
    MOV BH,00H
    MOV DH,0DH        
    MOV DL,13H   
    INT 10H
    
    RET		;RETURN TO PROCEDURE
LCUST_SELECT_INVALID ENDP



;===================================================================================================================================================
;===================================================================================================================================================
;=========================================++++++++++++++++++++++++++++++++++++++++++++++++++++++====================================================
;===================================================================================================================================================
;===================================================================================================================================================
;===================================================================================================================================================

MENU_THANKS_PROCEDURE PROC
	;fontground
	MOV AH,02H
	MOV BH,00H
	MOV DH,09H       
	MOV DL,00H       
	INT 10H
	
	MOV AH,09H
	LEA DX,MENU_THANKS	; Thankyou for using our system!
	INT 21H
	RET		;RETURN TO PROCEDURE
MENU_THANKS_PROCEDURE ENDP


MENU_SHOPNAME PROC
	;background
	MOV AH,06H
	MOV AX,0600H
	MOV BH,6EH
	MOV CX,0000H
	MOV DX,184FH
	INT 10H
	;fontground
	MOV AH,02H
	MOV BX,00
	MOV DX,0000
	INT 10H
	
	;=========== MAIN MENU OPTION ===========
	;shopname + icon + ENTSR SELECTION
	MOV AH,09H
	LEA DX,SHOPNAME
	INT 21H
	RET		;RETURN TO PROCEDURE
MENU_SHOPNAME ENDP


MAIN PROC
    MOV AX, @DATA
    MOV DS, AX	
	
	CALL LmenuICON

	MENU_ENDL:
    MOV AX, 4C00H
    INT 21H
MAIN ENDP  ; int main(){};a

LmenuICON PROC
    PUSH AX
    PUSH BX
    PUSH DX    ; store main procedure cursor

	CALL MENU_SHOPNAME 		;CALL FUNCTION SHOW SHOPNAME
		
	MOV AH,02H
	MOV BX,00
	MOV DX,0D1DH
	INT 10H
		
	MOV AH,01H
	INT 21H
	MOV MENU_SELECTION,AL	; cmp SELECTION
		
	CMP AL,'1'
	JE L_WELC_MENU_CUST_SELECT	; if (selection == '1')
	CMP AL,'2'
	JE Llogin				; else if (selection == '2')
	CMP AL,'3'
	JE LMENU_THANKS			; else if (selection == '3')
	
	;background
	MOV AH,06H
	MOV AX,0600H
	MOV BH,4FH
	MOV CX,1006H
	MOV DX,112EH
	INT 10H
	;fontground
	MOV AH,02H
	MOV BX,00
	MOV DX,1000H
	INT 10H
	
	MOV AH,09H
	LEA DX,SHOPNAME_INVALID
	INT 21H
	MOV AH,01H
	INT 21H
	MOV SELECTION,AL
	CMP AL,0DH
	JE	RETURN_LmenuICON
	CALL LmenuICON
	
	RETURN_LmenuICON:
		CALL LmenuICON
		
	L_WELC_MENU_CUST_SELECT:
		CALL LWELC_MENU		
		CALL LCUST_SELECT
		JMP MENU_ENDL
		
	LMENU_THANKS:
		CALL MENU_THANKS_PROCEDURE
		JMP MENU_ENDL 

    POP DX
    POP BX
    POP AX     ; to recover register
	RET
LmenuICON ENDP

;=============================(ADMIN LOGIN SYSTEM)========================================	
Llogin PROC
    PUSH AX
    PUSH BX
    PUSH CX
    PUSH DX
    PUSH SI    ; store main procedure cursor

	;background
	MOV AH,06H
	MOV AX,0600H
	MOV BH,6EH
	MOV CX,0000H
	MOV DX,184FH
	INT 10H
	
	;fontground
	MOV AH,02H
	MOV BX,00
	MOV DX,0000
	INT 10H
		
	;Login and logout interface
	MOV AH,09H
	LEA DX,STRFONT
	INT 21H
	
	;fontground for "RETURN  {R} "
	MOV AH,06H
	MOV AX,0600H
	MOV BH,6CH
	MOV CX,1404H
	MOV DX,142CH
	INT 10H
	MOV AH,02H
	MOV BX,00
	MOV DX,1400H
	INT 10H
	MOV AH,09H
	LEA DX,STRFONT_LOGIN_R
	INT 21H
		
	;background WHITE SIDE
	MOV AH,06H
	MOV AX,0600H
	MOV BH,7AH
	MOV CX,0708H
	MOV DX,0F2CH
	INT 10H
	
	;background BLUE FRAME
	MOV AH,06H
	MOV AX,0600H
	MOV BH,1AH
	MOV CX,080AH
	MOV DX,0E2AH
	INT 10H

	;fontground for "Username :"
	MOV AH,02H
	MOV BX,00
	MOV DH,0AH
	MOV DL,00H
	INT 10H
		
	MOV AH,09H
	LEA DX,USERNAME
	INT 21H
	
	L_INPUT_USERNAME_CONTINUE:
	;fontground for input username
	MOV AH,02H
	MOV BX,00
	MOV DH,0AH
	MOV DL,1DH
	INT 10H
		
	LEA SI,TARUMT    ; store(MOV) username --> SI
	JMP Luser_ADMIN
	
;compare ADMIN username
Luser_ADMIN:         ; Admin password part 

	
	MOV AH,01H
	INT 21H
	MOV BL,AL  
	MOV DL,[SI]  	 ; ARRAY for store PSW

	CMP DL,'R'				;
	JE L_RETURN_WELC_MENU	;	RETURN HOMEPAGE IF 
	CMP BL,'R'				;	"R" EXIST
	JE L_RETURN_WELC_MENU	;
	
	CMP DL,'$'			;---
	JE LPSW_ENTER		;\\\\
	CMP BL,[SI]			;\\\\\
	JNE LINVALID		;=====> compare user input with TARUMT
	INC SI				;|||||
	JMP Luser_ADMIN		;||||	
	JMP CONTINUE_ADMIN	;---	


	L_RETURN_WELC_MENU:
		CALL MAIN
		JMP L_INPUT_USERNAME_CONTINUE
	
;fontground for "Password :"
LPSW_ENTER:
	MOV AH,09H
	LEA DX,NL
	INT 21H
		
	;fontground for "Password : "
	MOV AH,02H
	MOV BX,00
	MOV DH,0BH
	MOV DL,00H
	INT 10H
		
	MOV AH,09H
	LEA DX,PASSWORD
	INT 21H
		
	;fontground for input password
	MOV AH,02H
	MOV BX,00
	MOV DH,0BH
	MOV DL,1DH
	INT 10H
	LEA SI,VERIFY 	; store PSW in SI
		
Lpassword_ADMIN:
	MOV AH,01H
	INT 21H
	MOV BL,AL
	MOV DL,[SI]  
	
	CMP DL,'R'				;
	JE L_RETURN_WELC_MENU	;	RETURN HOMEPAGE IF 
	CMP BL,'R'				;	"R" EXIST
	JE L_RETURN_WELC_MENU	;
	
	CMP DL,'$'			;---
	JE LcheckPSW		;\\\\
	CMP BL,[SI]			;\\\\\
	JNE LINVALID		;=====> compare user input with TARUMT
	INC SI				;|||||
	JMP Lpassword_ADMIN	;----

; Invalid username or password
LINVALID:
	MOV AH,09H
	LEA DX,NL
	INT 21H
		
	MOV AH,06H
	MOV AX,0600H
	MOV BH,34H
	MOV CX,0C05H
	MOV DX,0C27H
	INT 10H
	
	;fontground
	MOV AH,02H
	MOV BX,00
	MOV DH,0CH
	MOV DL,07H
	INT 10H
	
	MOV AH,09H
	LEA DX,INVALID
	INT 21H	
		
	MOV AH,01H
	INT 21H
	CMP AL,0DH
	JE Llogin_RetryOneMore   ; return to login
	JMP LINVALID

;compare ADMIN password
LcheckPSW:
	CMP BL,0DH
	JNE LINVALID 		; for checking process
		
	MOV AH,06H
	MOV AX,0600H
	MOV BH,2EH
	MOV CX,0D04H
	MOV DX,0D28H
	INT 10H
		
		
	JMP CONTINUE_ADMIN	

    POP SI
    POP DX
    POP CX
    POP BX
    POP AX     ; to recover register
	RET
Llogin ENDP

;====================================================================		
Llogin_RetryOneMore PROC         ;a label help to jump to login page
    PUSH AX    ; store main procedure cursor

	CALL Llogin

    POP AX     ; to recover register
	RET
Llogin_RetryOneMore ENDP

;=============================(ADMIN SYSTEM)========================================	
CONTINUE_ADMIN PROC
    PUSH AX
    PUSH BX
    PUSH DX    ; store main procedure cursor

	;background
	MOV AH,06H
	MOV AX,0600H
	MOV BH,6EH
	MOV CX,0000H
	MOV DX,184FH
	INT 10H
	
	;fontground
	MOV AH,02H
	MOV BX,00
	MOV DX,0106H
	INT 10H
	
	MOV AH,09H
	LEA DX,SYSTEM		;"===WELCOME TO ADMIN SYSTEM===$"
	INT 21H
	MOV AH,09H
	LEA DX,NL
	INT 21H
	MOV AH,09H
	LEA DX,CHECKING		;"SALES REPORT CHECKING   [1] >"
	INT 21H
	MOV AH,09H
	LEA DX,NL
	INT 21H
	MOV AH,09H
	LEA DX,XCHECKING	;"EXIT  |  LOG-OUT        [2] >"
	INT 21H
	
	;background
	MOV AH,06H
	MOV AX,0600H
	MOV BH,66H
	MOV CX,0401H
	MOV DX,0402H
	INT 10H
	
	;fontground
	MOV AH,02H
	MOV BX,00
	MOV DX,0401H
	INT 10H
	
	;enter selection [1] or [2]
	MOV AH,01H
	INT 21H
	SUB AL,30H
	MOV SELECTION,AL
	
	MOV AH,09H
	LEA DX,NL
	INT 21H
	
	;SELECTION OF OPT    
	CMP SELECTION,1		; if (selection == '1') 
	JE LSalesReport		;		Sales report;
	CMP SELECTION,1		; else if (selection == '0') 
	JL LINVALIDSECa		; 		cout << "INVALID SELECTION!!! PLEASE RE-ENTER...";
	CMP SELECTION,2		; else
	JG LINVALIDSECa		; 		cout << "INVALID SELECTION!!! PLEASE RE-ENTER..."
	CMP SELECTION,2		; else if (selection == '2') 
	JE LExit_Logout		; 		Exit | Log out;
	JMP CONTINUE_ADMIN
	
; if(SELECTION == '1')  -->  Sales report
LSalesReport:
	JMP LshowREPORT
	
LINVALIDSECa:		; else if (selection == '0' || selection >= '3') 
	;background
	MOV AH,06H
	MOV AX,0600H
	MOV BH,4FH
	MOV CX,0902H
	MOV DX,0A2BH
	INT 10H
	
	;fontground
	MOV AH,02H
	MOV BX,00
	MOV DX,0904H
	INT 10H
	
	MOV AH,09H
	LEA DX,INVALIDSEC	; cout << "INVALID SELECTION!!! PLEASE RE-ENTER...";
	INT 21H	
		
	MOV AH,09H
	LEA DX,NL
	INT 21H	
		
	MOV AH,09H
	LEA DX,REMOVEINV	; cout << "PRESS <ENTER> TO RETURN";
	INT 21H	
		
	MOV AH,01H
	INT 21H
	CMP AL,0DH
	CALL CONTINUE_ADMIN ; <Enter> to return back ADMIN SYSTEM

    POP DX
    POP BX
    POP AX     ; to recover register
	RET
CONTINUE_ADMIN ENDP

;====================================================================
Llogin_BACK1 PROC			;a label help to jump back Admin Login
    PUSH AX    ; store main procedure cursor

	CALL Llogin

    POP AX     ; to recover register
	RET
Llogin_BACK1 ENDP

CONTINUE_ADMIN_A PROC		;a label help to loop Admin system
    PUSH AX    ; store main procedure cursor

	JMP CONTINUE_ADMIN

    POP AX     ; to recover register
	RET
CONTINUE_ADMIN_A ENDP

;====================================================================
	
LshowREPORT PROC			; if (selection == '1')
    PUSH AX
    PUSH BX
    PUSH DX    ; store main procedure cursor

	;background
	MOV AH,06H
	MOV AX,0600H
	MOV BH,30H
	MOV CX,0502H
	MOV DX,0D23H
	INT 10H
	
	;fontground
	MOV AH,02H
	MOV BX,00
	MOV DX,060AH
	INT 10H
	
	MOV AH,09H
	LEA DX,HERE  		; to put the part of report later
	INT 21H
		
	JMP MENU_ENDL

    POP DX
    POP BX
    POP AX     ; to recover register
	RET
LshowREPORT ENDP

; if(SELECTION == '2')  -->  Exit | Log out
LExit_Logout PROC
    PUSH AX    ; store main procedure cursor

	JMP LshowExit

    POP AX     ; to recover register
	RET
LExit_Logout ENDP

LshowExit PROC			; "EXIT  |  LOG-OUT        [2] >"
    PUSH AX
    PUSH DX    ; store main procedure cursor

	MOV AH,09H
	LEA DX,ENSURE	; "ARE YOU SURE TO CONTINUE LOG-OUT "
	INT 21H
	
	;background
	MOV AH,06H
	MOV AX,0600H
	MOV BH,66H
	MOV CX,0632H
	MOV DX,0633H
	INT 10H
	
	MOV AH,01H
	INT 21H
	MOV SELECTION,AL ; input selection [y/n]

	; if (selection == 'Y' || selection == 'y')
	CMP SELECTION,'Y'
	JE Llogin_BACK0   ;back to login page
	CMP SELECTION,'y'
	JE Llogin_BACK0
	
	; else if (selection == 'N' || selection == 'n')
	CMP SELECTION,'N'
	JE CONTINUE_ADMIN_0  ;continue with admin menu
	CMP SELECTION,'n'    
	JE CONTINUE_ADMIN_0
	
	MOV AH,09H
	LEA DX,NL
	INT 21H
	; else
	JMP LINVALIDSEC

    POP DX
    POP AX     ; to recover register
	RET
LshowExit ENDP

;====================================================================
Llogin_BACK0 PROC      		;a label help to jump back Admin Login
    PUSH AX    ; store main procedure cursor

	CALL LmenuICON

    POP AX     ; to recover register
	RET
Llogin_BACK0 ENDP

CONTINUE_ADMIN_0 PROC  		;a label help to loop Admin system
    PUSH AX    ; store main procedure cursor

	JMP CONTINUE_ADMIN_A

    POP AX     ; to recover register
	RET
CONTINUE_ADMIN_0 ENDP

;====================================================================
	
LINVALIDSEC PROC
    PUSH DX    ; store main procedure cursor

	MOV AH,09H
	LEA DX,INVALIDSEC
	INT 21H
	JMP MENU_ENDL

    POP DX     ; to recover register
	RET
LINVALIDSEC ENDP

;============================================ CUSTOMER ORDER PART + VIEW MENU ========================================	
LWELC_MENU PROC
    PUSH AX
    PUSH BX
    PUSH CX
    PUSH DX    ; store main procedure cursor

	;background (WHOLE PART)
	MOV AH,06H
	MOV AX,0600H
	MOV BH,6EH
	MOV CX,0000H
	MOV DX,184FH
	INT 10H
	
	;background (MENU FONT)
	MOV AH,06H
	MOV AX,0600H
	MOV BH,34H
	MOV CX,0205H
	MOV DX,022FH
	INT 10H
	
	;background (RETURN {R})
	MOV AH,06H
	MOV AL,00H
	MOV BH,6CH
	MOV CX,0D21H
	MOV DX,0D2DH
	INT 10H
	
	;fontground (WHOLE PART)
	MOV AH,02H
	MOV BH,00H
	MOV DH,00H
	MOV DL,00H
	INT 10H
	
	MOV AH,09H
	LEA DX,WELC_MENU
	INT 21H
	
	; cin >> selection
	CALL LCUST_SELECT ; CALL FUNCTION
	
	JMP LWELC_MENU

    POP DX
    POP CX
    POP BX
    POP AX     ; to recover register
	RET
LWELC_MENU ENDP


END MAIN
